package snc.connect.broker.controllers.ocpi

import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestHeader
import org.springframework.web.bind.annotation.RestController
import snc.connect.broker.PartyRepository
import snc.connect.broker.Properties
import snc.connect.broker.enums.InterfaceRole
import snc.connect.broker.enums.ModuleID
import snc.connect.broker.enums.StatusCode
import snc.connect.broker.models.ocpi.Endpoint
import snc.connect.broker.models.ocpi.OcpiResponseBody
import snc.connect.broker.models.ocpi.Version
import snc.connect.broker.models.ocpi.VersionDetail
import snc.connect.broker.tools.extractToken
import snc.connect.broker.tools.urlJoin

@RestController
class VersionsController(private val repository: PartyRepository,
                         private val properties: Properties) {

    @GetMapping("/ocpi/hub/versions")
    fun getVersions(@RequestHeader("Authorization") authorization: String): ResponseEntity<OcpiResponseBody> {

        // check authorization TOKEN_A exists (generated by admin)
        val knownParties = repository.findByAuth_TokenA(authorization.extractToken())

        val responseBody = if (knownParties.count() > 0) {

            // prepare OCPI version information body
            val endpoint = urlJoin(properties.host, "/ocpi/hub/2.2")
            val versions = mapOf("versions" to arrayOf(Version("2.2", endpoint)))
            OcpiResponseBody(
                    StatusCode.SUCCESS.code,
                    data = versions)

        } else {
            OcpiResponseBody(
                    StatusCode.CLIENT_INVALID_PARAMETERS.code,
                    "Unauthorized: Requesting party not recognized")
        }

        return ResponseEntity.ok().body(responseBody)
    }

    @GetMapping("/ocpi/hub/2.2")
    fun getVersionsDetail(@RequestHeader("Authorization") authorization: String): ResponseEntity<OcpiResponseBody> {

        // check authorization TOKEN_A exists (generated by admin)
        val knownParties = repository.findByAuth_TokenA(authorization.extractToken())

        val responseBody = if (knownParties.count() > 0) {

            var endpoints = arrayOf<Endpoint>()

            // prepare EMSP and CPO interfaces for each module
            for (id in ModuleID.values()) {

                val mspEndpoint = Endpoint(
                        id.value,
                        InterfaceRole.MSP,
                        urlJoin(properties.host, "/ocpi/emsp/2.2/${id.value}"))
                val cpoEndpoint = Endpoint(
                        id.value,
                        InterfaceRole.CPO,
                        urlJoin(properties.host, "/ocpi/cpo/2.2/${id.value}"))

                endpoints = endpoints.plus(arrayOf(mspEndpoint, cpoEndpoint))
            }

            OcpiResponseBody(
                    StatusCode.SUCCESS.code,
                    data = VersionDetail("2.2", endpoints))

        } else {
            OcpiResponseBody(
                    StatusCode.CLIENT_INVALID_PARAMETERS.code,
                    "Unauthorized: Requesting party not recognized")
        }

        return ResponseEntity.ok().body(responseBody)
    }
}