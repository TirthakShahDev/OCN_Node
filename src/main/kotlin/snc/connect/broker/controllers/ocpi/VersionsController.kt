package snc.connect.broker.controllers.ocpi

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestHeader
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import snc.connect.broker.repositories.OrganizationRepository
import snc.connect.broker.Properties
import snc.connect.broker.enums.InterfaceRole
import snc.connect.broker.enums.ModuleID
import snc.connect.broker.enums.Status
import snc.connect.broker.models.ocpi.Endpoint
import snc.connect.broker.models.ocpi.OcpiResponseBody
import snc.connect.broker.models.ocpi.Version
import snc.connect.broker.models.ocpi.VersionDetail
import snc.connect.broker.tools.extractToken
import snc.connect.broker.tools.urlJoin

@RestController
@RequestMapping("/ocpi/hub")
class VersionsController(private val repository: OrganizationRepository,
                         private val properties: Properties) {

    @GetMapping("/versions")
    fun getVersions(@RequestHeader("Authorization") authorization: String): OcpiResponseBody {

        // check authorization TOKEN_A exists (generated by admin)
        return if (repository.existsByAuth_TokenA(authorization.extractToken())) {

            // prepare OCPI version information body
            val endpoint = urlJoin(properties.host, "/ocpi/hub/2.2")
            val versions = mapOf("versions" to arrayOf(Version("2.2", endpoint)))
            OcpiResponseBody(
                    Status.SUCCESS.code,
                    data = versions)

        } else {
            OcpiResponseBody(
                    Status.CLIENT_INVALID_PARAMETERS.code,
                    "Unauthorized: Requesting party not recognized")
        }
    }

    @GetMapping("/2.2")
    fun getVersionsDetail(@RequestHeader("Authorization") authorization: String): OcpiResponseBody {

        // check authorization TOKEN_A exists (generated by admin)
        return if (repository.existsByAuth_TokenA(authorization.extractToken())) {

            var endpoints = arrayOf<Endpoint>()

            // prepare EMSP and CPO interfaces for each module
            for (id in ModuleID.values()) {

                // these modules have no specific EMSP/CPO endpoint
                if (id.value == "credentials" || id.value == "hubclientinfo") {

                    val mspEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.MSP,
                            urlJoin(properties.host, "/ocpi/hub/2.2/${id.value}"))
                    val cpoEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.CPO,
                            urlJoin(properties.host, "/ocpi/hub/2.2/${id.value}"))

                    endpoints = endpoints.plus(arrayOf(mspEndpoint, cpoEndpoint))

                } else {

                    val mspEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.MSP,
                            urlJoin(properties.host, "/ocpi/emsp/2.2/${id.value}"))
                    val cpoEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.CPO,
                            urlJoin(properties.host, "/ocpi/cpo/2.2/${id.value}"))

                    endpoints = endpoints.plus(arrayOf(mspEndpoint, cpoEndpoint))
                }

            }

            OcpiResponseBody(
                    Status.SUCCESS.code,
                    data = VersionDetail("2.2", endpoints))

        } else {
            OcpiResponseBody(
                    Status.CLIENT_INVALID_PARAMETERS.code,
                    "Unauthorized: Requesting party not recognized")
        }
    }
}