package snc.connect.broker.models.entities

import snc.connect.broker.enums.ConnectionStatusType
import snc.connect.broker.enums.InterfaceRole
import snc.connect.broker.enums.Role
import snc.connect.broker.models.ocpi.BusinessDetails
import snc.connect.broker.tools.generateUUIDv4Token
import snc.connect.broker.tools.getTimestamp
import javax.persistence.*

@Entity
@Table(name = "organizations")
class OrganizationEntity(
        var status: ConnectionStatusType = ConnectionStatusType.PLANNED,
        var lastUpdated: String = getTimestamp(),
        var versionsUrl: String? = null,
        @Embedded var auth: Auth = Auth(),
        @Id @GeneratedValue var id: Long? = null
)

// Tokens for authorization on OCPI party servers
//      tokenA = generated by admin; used in registration to broker
//      tokenB = generated by party; used by broker as authorization on party's server
//      tokenC = generated by broker; used by party for subsequent requests on broker's server
@Embeddable
class Auth(
        var tokenA: String? = generateUUIDv4Token(),
        var tokenB: String? = null,
        var tokenC: String? = null
)

@Entity
class CredentialEntity(
        @Enumerated(EnumType.STRING) var role: Role,
        @Embedded var businessDetails: BusinessDetails,
        var partyID: String,
        var countryCode: String,
        var organization: Long,
        @Id @GeneratedValue var id: Long? = null
)

@Entity
class EndpointEntity(
        var organization: Long,
        var identifier: String,
        @Enumerated(EnumType.STRING) var role: InterfaceRole,
        var url: String,
        @Id @GeneratedValue var id: Long? = null
)
