package snc.connect.broker.models.entities

import snc.connect.broker.enums.ConnectionStatusType
import snc.connect.broker.enums.RoleType
import snc.connect.broker.tools.generateUUIDv4Token
import java.time.Instant
import java.time.format.DateTimeFormatter
import javax.persistence.*

@Entity
//TODO: countryCode/partyID combinations should be unique
class Party(
        var name: String? = null,
        var countryCode: String,
        var partyID: String,
        @Enumerated(EnumType.STRING) var role: RoleType? = null,
        @Embedded var tokens: Tokens = Tokens(),
        @Embedded var endpoints: Endpoints = Endpoints(),
        @Embedded var clientInfo: ClientInfo = ClientInfo(),
        @Id @GeneratedValue var id: Long? = null
)

// Tokens for authorization on OCPI party servers
//      tokenA = generated by admin; used in registration to broker
//      tokenB = generated by party; used by broker as authorization on party's server
//      tokenC = generated by broker; used by party for subsequent requests on broker's server
@Embeddable
class Tokens(
        var tokenA: String? = generateUUIDv4Token(),
        var tokenB: String? = null,
        var tokenC: String? = null
)

// Endpoints implemented by a given Party
@Embeddable
class Endpoints(
        var cdrs: String? = null,
        var chargingprofiles: String? = null,
        var commands: String? = null,
        var credentials: String? = null,
        var hubclientinfo: String? = null,
        var locations: String? = null,
        var sessions: String? = null,
        var tariffs: String? = null,
        var tokens: String? = null,
        var versions: String? = null

)

// Information to fulfill hubclientinfo in addition to party_id, country_code and role
@Embeddable
class ClientInfo(
        @Enumerated(EnumType.STRING) var status: ConnectionStatusType = ConnectionStatusType.PLANNED,
        var lastUpdated: String = DateTimeFormatter.ISO_INSTANT.format(Instant.now())
)