package snc.openchargingnetwork.client.controllers.ocpi

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestHeader
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import snc.openchargingnetwork.client.repositories.PlatformRepository
import snc.openchargingnetwork.client.config.Properties
import snc.openchargingnetwork.client.models.ocpi.InterfaceRole
import snc.openchargingnetwork.client.models.ocpi.ModuleID
import snc.openchargingnetwork.client.models.ocpi.OcpiStatus
import snc.openchargingnetwork.client.models.exceptions.OcpiClientInvalidParametersException
import snc.openchargingnetwork.client.models.ocpi.*
import snc.openchargingnetwork.client.tools.extractToken
import snc.openchargingnetwork.client.tools.urlJoin

@RestController
@RequestMapping("/ocpi/hub")
class VersionsController(private val repository: PlatformRepository,
                         private val properties: Properties) {

    @GetMapping("/versions")
    fun getVersions(@RequestHeader("Authorization") authorization: String): OcpiResponse<Versions> {

        // check authorization TOKEN_A exists (generated by admin)
        return if (repository.existsByAuth_TokenA(authorization.extractToken())) {

            // prepare OCPI version information body
            val endpoint = urlJoin(properties.url, "/ocpi/hub/2.2")
            val versions = Versions(versions = arrayOf(Version("2.2", endpoint)))
            OcpiResponse(
                    OcpiStatus.SUCCESS.code,
                    data = versions)

        } else {
            throw OcpiClientInvalidParametersException("Invalid CREDENTIALS_TOKEN_A")
        }
    }

    @GetMapping("/2.2")
    fun getVersionsDetail(@RequestHeader("Authorization") authorization: String): OcpiResponse<VersionDetail> {

        // check authorization TOKEN_A exists (generated by admin)
        return if (repository.existsByAuth_TokenA(authorization.extractToken())) {

            var endpoints = arrayOf<Endpoint>()

            // prepare EMSP and CPO interfaces for each module
            for (id in ModuleID.values()) {

                // these modules have no specific EMSP/CPO endpoint
                if (id.value == "credentials" || id.value == "hubclientinfo") {

                    val mspEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.MSP,
                            urlJoin(properties.url, "/ocpi/hub/2.2/${id.value}"))
                    val cpoEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.CPO,
                            urlJoin(properties.url, "/ocpi/hub/2.2/${id.value}"))

                    endpoints = endpoints.plus(arrayOf(mspEndpoint, cpoEndpoint))

                } else {

                    val mspEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.MSP,
                            urlJoin(properties.url, "/ocpi/emsp/2.2/${id.value}"))
                    val cpoEndpoint = Endpoint(
                            id.value,
                            InterfaceRole.CPO,
                            urlJoin(properties.url, "/ocpi/cpo/2.2/${id.value}"))

                    endpoints = endpoints.plus(arrayOf(mspEndpoint, cpoEndpoint))
                }

            }

            OcpiResponse(
                    OcpiStatus.SUCCESS.code,
                    data = VersionDetail("2.2", endpoints))

        } else {
            throw OcpiClientInvalidParametersException("Invalid CREDENTIALS_TOKEN_A")
        }
    }
}